一、windows常用命令

1.cd 进入某个文件夹

2.cd .. 回退

3.cd / 回退到/

4.mkdir test 新建文件夹test

5.touch test.txt 新建test.txt文件

6.rm test.txt 删除test.txt文件

7.rm -rf test/ 强制删除test文件夹

二、学习git的基本使用 
1.git init 初始化git,在当前文件夹初始化git

2.git status 查看当前文件状态

3.git add [文件名或者文件夹] 添加文件到缓存区

4.git add . 当前文件夹下的所有文件都添加到缓缓存区

5.git commit -m "提交记录" 提交文件到工作区

6.git rm --cached 文件名 把当前文件在缓存区的状态回退

7.git log 查看当前操作日志
    git log --author="freedzz" 查找某个人的提交记录
	git log --oneline 简写log
	git log --oneline --graph 展示当前分支版本线图
	git log --oneline --graph --all 展示所有分支的版本线图

8.git diff 查看当前追踪的文件的修改记录（只能在文件没有放入缓存区时查看文件修改的内容）
    git diff --staged 当文件放入缓存区后查看文件修改内容

9.本地删除文件后，把当前文件夹中的文件放入缓存区中会自动在提交时把工作区中的文件删除掉
    git rm 3.txt 直接把本地文件 删除掉

10.本地修改文件名称后，使用git status查看当前文件状态，发现会把原来的文件删掉然后新增一个重命名的文件
提交文件到缓冲区后，会显示原文件被重命名
    git mv 3.txt 2.txt 快速重命名

11.git mv 3.txt /staff 2.txt 移动文件并重命名

12.git commit -am "am 相当于git add 加上 git commit" 使用快捷提交方式

13.git checkout -- index.html 回退本地文件到上次提交的状态（缓存区中的文件不会消失掉）

14.git reset HEAD 文件名 撤销对当前文件的追踪-不把文件放到缓存区

15.git reset --hard HEAD^ 回退到上一个版本 ^代表回退一个版本（回退之前的版本全部消失）
    git reset --hard 386e091 回退到对应哈希值的版本
	回退前：version1 > version 2 > version 3
	回退后：version1
	git reset --hard ORIG_HEAD 回退到没有合并之前的状态
	
16.git checkout 1d107d0 -- index.html index.html文件回退到对应哈希值版本（相当于新增加一个commit版本，以前的版本都在）
	回退前：version1 > version 2 > version 3
	回退后：version1 > version 2 > version 3 > version 4
	
17.git remote add helloGit https://github.com/freedzz/helloword.git 连接远程厂库 helloGit可以自定义名称

18.git push -u master push本地代码到远程厂库

19.git branch bug_fix_1 创建分支

20.git checkout bug_fix_1 切换分支

21.git checkout -b bug_fix_2 新建bug_fix_2分支并切换到bug_fix_2分支

22.git branch -d bug_fix_2 删除分支bug_fix_2,不能在当前分支删除当前分支,分支修改后没有提交也不能删除

23.git branch bug_fix_2 ff91dd4 回复删除的分支 创建分支时加上删除掉的分支的哈希值

24.合并分支
	1.git merge 分支名 把分支和并到当前分支
	
25.合并冲突-当两个分支修改了相同位置的代码，合并代码时会发生冲突
	1.取消冲突文件的合并（忽略当前冲突代码） git merge --abort
	2.修改冲突代码，然后git add . 再git commit 提交冲突记录

26.取消快转
	git merge bug_fix_1 --no-ff 采用快转的和并方式，分支上面的commit在合并后会混淆，
								取消快转后合并完的版本线图更加清晰，能清楚看到在分支上的commit
	新开一个分支不要用快转机制，远端拉去服务器最新的代码可以用快转机制直接git pull
	git merge bug_fix_1 --no-ff --no-commit 合并代码但不提交到本地厂库（如果要commit，需要手动commit）
	git merge bug_fix_1 --squash 合并小版本或者小功能时，压缩分支，合并完后只有master，并且分支的commit也看不见了（需要手动commit）

27.git clone http:***** 从远端厂库克隆项目到本地

28.git pull 更新本地代码 = git fetch + git merge （主要用于从远端服务器拉去合并最新的代码）

29.git fetch 更新本地remote的远端厂库代码，更新完后还需要git merge 和并到本地厂库

30.git remote orgin http:**** 设置orgin的地址为http:****

31.git push -u orgin master 把本地的master代码推送到orgin远端厂库

32.git branch --merged 在分支上会把所有的分支显示出来 在master上会显示所有已经合并的分支

33.git branch --no-merged 显示没有合并的分支

34.git branch --merged | egrep -v "(^\*|master|develop)" | xargs git branch -d 删除合并分支中分支名不为master和develop的其他分支

35.git branch --no-merged | egrep -v "(^\*|master|develop)" | xargs git branch -D 删除没有合并的分支

三、改变当前追踪的文件